# /etc/init/sidekiq.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then mange sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description "Sidekiq Background Worker"

# no "start on", we don't want to automatically start
# start on runlevel [2345]
stop on (stopping workers or runlevel [06])
# stop on runlevel [!2345]

# change to match your deployment user
setuid deployer
setgid deployer

respawn
respawn limit 3 30

# TERM and USR1 are sent by sidekiqctl when stopping sidekiq.  Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM USR1

instance $index

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<EOT
  # use syslog for logging
  exec &> /dev/kmsg

  export HOME=/home/deployer
  export RAILS_ENV=production

  # source rvm
  source /home/deployer/.rvm/scripts/rvm

  logger -t sidekiq "[apg] Starting process: $index"

  cd /home/deployer/apps/hnapi/current
  exec bundle exec sidekiq -i ${index} -e production -C config/sidekiq.yml -P tmp/pids/sidekiq-${index}.pid >> /home/deployer/app$

EOT
end script
